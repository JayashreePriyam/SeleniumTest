You can use Plink to view the PuTTY screen without actually logging into PuTTY by running commands on the remote system or server where PuTTY is running. However, it's important to note that PuTTY is a terminal emulator, and it typically does not have the capability to share or stream its screen directly. Instead, you can use Plink to execute commands on the remote system and retrieve the output.

Here are the general steps to achieve this:

1. Establish an SSH connection with Plink:

Use Plink to establish an SSH connection to the target host where PuTTY is running. You can do this by running Plink with the appropriate SSH credentials and hostname or IP address of the remote system. Here's an example of how you can achieve this using Java:

```java
try {
    ProcessBuilder pb = new ProcessBuilder("plink", "-ssh", "username@hostname", "-pw", "password", "command_to_execute");
    pb.redirectErrorStream(true);
    Process process = pb.start();
    process.waitFor();
} catch (IOException | InterruptedException e) {
    e.printStackTrace();
}
```

Replace "username", "hostname", "password", and "command_to_execute" with the actual credentials and command you want to execute on the remote system.

2. Execute commands on the remote system:

Once the SSH connection is established, you can use Plink to execute commands on the remote system. These commands can retrieve information from the server, run scripts, or perform any other necessary tasks.

For example, if you want to retrieve a specific file from the remote server, you can use Plink to execute a command that retrieves the file and then handle the file locally within your Java application.

3. Retrieve output and handle it in your Java application:

After executing commands on the remote system using Plink, you can retrieve the output of those commands and handle it within your Java application. You can capture the standard output and error streams from the Process object and process the output as needed.

Here's an example of how you can capture the output of the command executed using Plink in Java:

```java
try {
    ProcessBuilder pb = new ProcessBuilder("plink", "-ssh", "username@hostname", "-pw", "password", "command_to_execute");
    Process process = pb.start();

    // Capture the output of the command
    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
    String line;
    while ((line = reader.readLine()) != null) {
        // Process the output line by line as needed
        System.out.println(line);
    }

    process.waitFor();
} catch (IOException | InterruptedException e) {
    e.printStackTrace();
}
```

Replace "username", "hostname", "password", and "command_to_execute" with the appropriate values for your SSH connection and the command you want to execute on the remote system.

It's important to handle exceptions and robust error checking to ensure that your Java application can appropriately respond to any issues or failures that may occur when using Plink to interact with the remote system.

Remember that PuTTY itself does not provide direct means to view its screen remotely, but using Plink to execute commands on the remote system provides a way to interact with the server where PuTTY is running and retrieve information or perform actions as needed.