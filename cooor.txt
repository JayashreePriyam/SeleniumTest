To run PuTTY UI commands remotely from Java using Plink, you can use the ProcessBuilder class to execute Plink commands. However, it's important to note that running UI commands in a headless environment, such as an SSH session established with Plink, may not be straightforward. PuTTY itself is a GUI application, and running UI commands directly via Plink may not be feasible as it typically requires an active X server.

If you need to interact with the UI of PuTTY remotely, it's generally recommended to use dedicated tools and APIs designed for such purposes instead of relying on Plink for UI interaction.

That being said, if you still need to use Plink to send UI commands remotely, you can follow these general steps:

1. Utilize the "-load" option to specify the saved PuTTY session.
2. Use the "-m" option followed by the name of a local file containing the commands to be executed.

Here's an example of how you can achieve this using the ProcessBuilder in Java:

```java
try {
    String sessionName = "your_saved_session_name"; // Replace with the name of your saved session in PuTTY
    
    // Create a local file containing the commands to be executed
    File commandFile = new File("commands.txt");
    FileWriter writer = new FileWriter(commandFile);
    writer.write("ls\n"); // Example: Replace with the actual UI command
    writer.write("echo Hello\n"); // Example: Replace with the actual UI command
    writer.close();
    
    // Execute the commands file using Plink
    ProcessBuilder pb = new ProcessBuilder("plink", "-load", sessionName, "-m", "commands.txt");
    pb.redirectErrorStream(true);
    Process process = pb.start();
    // Handle the process output as needed
    
    // Delete the temporary commands file
    commandFile.delete();
} catch (IOException e) {
    e.printStackTrace();
}
```

In this example, replace "your_saved_session_name" with the actual name of the saved session in PuTTY. Within the commands.txt file, you can specify the UI commands that you want to execute remotely.

It's important to note that using Plink to send UI commands may not be secure, and there might be limitations due to the headless nature of the process. Additionally, directly interacting with the UI of an application remotely in this manner may not be the best practice from a security and operational standpoint.

For more complex or interactive UI operations, consider using dedicated remote management tools or creating a web-based or command-line interface for the desired functionality. Always ensure that your approach aligns with security best practices and complies with your organization's policies and guidelines.