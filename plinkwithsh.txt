Sure, you can use the ProcessBuilder class in Java to execute a .txt or .sh file on a remote server using Plink. Here's an example of how you can achieve this:

First, let's assume you have a .txt file (script.txt) or a .sh file (script.sh) on the remote server, and you want to execute it using Plink.

Here's how you can use the ProcessBuilder class to achieve this:

For .txt File:
```java
try {
    ProcessBuilder pb = new ProcessBuilder("plink", "-ssh", "username@hostname", "-P", "port", "-pw", "password", "cat /path/to/script.txt");
    pb.redirectErrorStream(true);
    Process process = pb.start();
    // Handle the process output as needed
} catch (IOException e) {
    e.printStackTrace();
}
```

Replace "username", "hostname", "port", and "password" with the appropriate SSH credentials and connection details. Also, replace "/path/to/script.txt" with the actual path to the script on the remote server.

For .sh File:
```java
try {
    ProcessBuilder pb = new ProcessBuilder("plink", "-ssh", "username@hostname", "-P", "port", "-pw", "password", "bash /path/to/script.sh");
    pb.redirectErrorStream(true);
    Process process = pb.start();
    // Handle the process output as needed
} catch (IOException e) {
    e.printStackTrace();
}
```

Replace "username", "hostname", "port", and "password" with the appropriate SSH credentials and connection details. Also, replace "/path/to/script.sh" with the actual path to the script on the remote server.

In both examples, we use the ProcessBuilder class to execute Plink with the necessary parameters to establish an SSH connection to the remote server and execute the script file using the appropriate command (`cat` for .txt file and `bash` for .sh file).

You can then handle the output of the process, such as capturing and processing the standard output or error streams, as needed for your application.

Make sure to handle exceptions and add appropriate error checking to ensure the robustness of the code when using ProcessBuilder to execute Plink commands.